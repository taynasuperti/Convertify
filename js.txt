// essa linha garante que todos os elementos sejam carregados por completo para garantir que seja possível usar todos os elementos sem erro.
document.addEventListener('DOMContentLoaded', function() {
    //essa linha serve para chamar a função onde vai carregar todas as moedas disponíveis
    carregarGrafico();
});

// essa é a função principal, onde vai carregar o gráfico e fazer a requisição da API
async function carregarGrafico() {
    //aqui é onde será selecionado o elemento canvas para "desenhar" o gráfico
    const ctx = document.getElementById('graficoMoeda').getContext('2d');
    //esse "getContext" é o que vai permitir que se desenhe o gráfico dentro canvas
    //já o "2d" é para que o gráfico apareça em 2d (bidimensional)
    
    //essa parte vai "pegar" as informações dos selects (onde o usuário seleciona a moeda e o período que ele deseja analisar)
    const moedaSelect = document.getElementById('moeda');
    const periodoSelect = document.getElementById('periodo');

    //já essa parte vai "buscar" os valores que o usuario escolheu
    const moedaEscolhida = moedaSelect.value; //busca a moeda que o usuário selecionou
    const periodoEscolhido = periodoSelect.value; //busca o período que o usuário selecionou

    try {
        //aqui é feito a requisição para a API com a moeda e o período escolhido
        const resposta = await fetch(`https://api.exchangerate.host/latest?base=${moedaEscolhida}&symbols=BRL`);
        // depois que a resposta chega, a é necessário transformar ela em um formato que o javaScript entenda (por isso se chama JSON)
        
        // Transformando a resposta da API em formato JSON
        const dados = await resposta.json();

        // origemSelect.innerHTML = '';
        // destinoSelect.innerHTML = '';
        // antes de colocar as novas moedas é neessário limpar os selects antes de adicionar novas opções

        // Verificando se a resposta da API é válida
        if (!resposta.ok) {
            throw new Error(`Erro na requisição: ${resposta.status}`);
        }

        

        // Verificando a estrutura dos dados recebidos
        console.log(dados);

        if (!dados.rates || !dados.rates.BRL) {
            throw new Error('Dado de taxa de câmbio não encontrado na resposta da API.');
        }

        //essa parte vai definir os dados que vão aparecer no gráfico com base nos dados que vai ser recebido da API

        //aqui vai ser pego o valor da cotação da moeda escolhida pelo usuário e transforma-lá em um formato que o chart.js entenda
        const cotacao = dados.rates.BRL; // Acessando diretamente 'rates.BRL'

        //aqui cria um exemplo simples de gráfico para mostrar as variações ao longo do tempo

        //aqui será criado dados fictícios de acordo com o tempo escolhido para inserir no gráfico
        let labels = []; //serve para armazenar os dados dos labels
        let data = []; //serve para armazenar os valor da cotação de acordo com o tempo

        //aqui cria dados de exemplos para com base no tempo escolhido
        if (periodoEscolhido === 'daily') {
            //se o usuário escolher a variação da cotação "diária" será mostrado uma cotação para os últimos 7 dias
            labels = ['Dia 1', 'Dia 2', 'Dia 3', 'Dia 4', 'Dia 5', 'Dia 6', 'Dia 7'];
            data = [cotacao, cotacao * 1.05, cotacao * 0.98, cotacao * 1.02, cotacao * 0.97, cotacao * 1.03, cotacao * 0.99];
            //aqui simula um histórico diário com pequenas variações para aparecer no gráfico
        } else if (periodoEscolhido === 'weekly') {
            //se o usuário escolher a variação da cotação "semanal" será mostrado uma cotação para os últimas 4 semanas
            labels = ['Semana 1', 'Semana 2', 'Semana 3', 'Semana 4'];
            data = [cotacao, cotacao * 1.1, cotacao * 0.95, cotacao * 1.05];
            //aqui é o mesmo esquema da parte de cima, simula um histórico semanal com pequenas variações para aparecer no gráfico
        } else if (periodoEscolhido === 'monthly') { // Corrigido para 'monthly'
            //se o usuário escolher a variação da cotação "mensal" será mostrado uma cotação para os últimos 6 meses
            labels = ['Mês 1', 'Mês 2', 'Mês 3', 'Mês 4', 'Mês 5', 'Mês 6'];
            data = [cotacao, cotacao * 1.2, cotacao * 1.1, cotacao * 1.05, cotacao * 0.98, cotacao * 1.15];
            //mesmo esquema de simulação da parte de cima
        } else if (periodoEscolhido === 'yearly') {
            //se o usuário escolher a variação da cotação "anual" será mostrado uma cotação para os últimos 3 anos
            labels = ['Ano 1', 'Ano 2', 'Ano 3'];
            data = [cotacao, cotacao * 0.95, cotacao * 1.1];
            //aqui continua o esquema de simulação da cotação
        } else {
            alert("Valor selecionado é inválido");
        }

        // Verificando se os dados estão válidos antes de continuar
        if (!data || data.length === 0 || !labels || labels.length === 0 || isNaN(cotacao)) {
            console.error('Dados inválidos para o gráfico');
            return; // Não prosseguir se os dados forem inválidos
        }

        // Verificando novamente se a cotação é válida
        console.log('Cotação:', cotacao);
        if (isNaN(cotacao)) {
            console.error('Cotação inválida');
            return;
        }

        //aqui será "desenhado" o gráfico, já que acima já foi coletado os valores (preço das moedas) e os labels (datas) 
        new Chart(ctx, {
            type: 'line', //aqui é informado o tipo de gráfico que será usado (não interfere os dados que foram coletados acima, só a forma de exibição)
            data: {
                labels: labels, //aqui é onde será inserido as informações coletadas no labels (nesse caso serão as datas)
                datasets: [{
                    label: `Valor do ${moedaEscolhida} (em BRL)`, //aqui é o título do gráfico
                    data: data, //aqui será colocado os dados reais do gráfico (nesse caso, os preços reais das moedas)
                    borderColor: '#033b01', //aqui é apenas a cor da linha
                    fill: false, //serve para não preencher o gráfico com alguma cor
                    tension: 0.1 //para dar uma leve suavizada na linha
                }]
            },
            options: {
                responsive: true, //para fazer com que o gráfico se ajuste de acordo com o tamanho da tela que ele será exibido
                scales: { 
                    y: {
                        beginAtZero: false, //indica que o eixo Y vai começar no valor mais baixo dos dados coletados 
                    }
                }
            }
        });
    } catch (erro) {
        // caso ocorra algum erro, falha de requisição ou de dados, vai aparecer essa mensagem de erro
        console.error('Erro ao carregar os dados:', erro);
        document.getElementById('mensagem-erro').style.display = 'block'; // Exibe a mensagem de erro na tela
    }
}
